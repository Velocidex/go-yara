diff --git a/libyara/include/yara/limits.h b/libyara/include/yara/limits.h
index 4195f3fd..c45fe6b0 100644
--- a/libyara/include/yara/limits.h
+++ b/libyara/include/yara/limits.h
@@ -34,7 +34,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <windows.h>
 #endif

-#include "utils.h"
+#include "yara/utils.h"

 // Maximum lenght of file paths. This is the only limit that doesn't have the
 // YR_ prefix. The intention is using the default MAX_PATH if defined.
diff --git a/libyara/include/yara/parser.h b/libyara/include/yara/parser.h
index 057e8fe3..300d1050 100644
--- a/libyara/include/yara/parser.h
+++ b/libyara/include/yara/parser.h
@@ -31,7 +31,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define YR_PARSER_H


-#include "lexer.h"
+#include "yara/lexer.h"


 int yr_parser_emit(
diff --git a/libyara/modules/math.c b/libyara/modules/math.c
index 7043f598..0b59a542 100644
--- a/libyara/modules/math.c
+++ b/libyara/modules/math.c
@@ -39,13 +39,22 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 // log2 is not defined by math.h in VC++

-#if defined(_MSC_VER) && _MSC_VER < 1800
-static double log2(double n)
-{
-  return log(n) / log(2.0);
+// A fast approximate log2 function:
+// https://github.com/etheory/fastapprox/blob/master/fastapprox/src/fastlog.h
+// Having it here removes the need to link to the math library and
+// reduces our depenencies while being good enough for entropy
+// detection.
+double log2 (double x)
+ {
+    union { float f; uint32_t i; } vx = { x };
+    union { uint32_t i; float f; } mx = { (vx.i & 0x007FFFFF) | 0x3f000000 };
+    float y = vx.i;
+    y *= 1.1920928955078125e-7f;
+
+    return y - 124.22551499f
+        - 1.498030302f * mx.f
+        - 1.72587999f / (0.3520887068f + mx.f);
 }
-#endif
-

 define_function(string_entropy)
 {
diff --git a/libyara/modules/pe.c b/libyara/modules/pe.c
index 2d399c21..afe91bac 100644
--- a/libyara/modules/pe.c
+++ b/libyara/modules/pe.c
@@ -31,7 +31,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <ctype.h>
 #include <time.h>

-#include "../crypto.h"
+#include "crypto.h"
 #if defined(HAVE_LIBCRYPTO)
 #include <openssl/safestack.h>
 #include <openssl/asn1.h>
@@ -45,15 +45,24 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #endif
 #endif

-#include <yara/endian.h>
-#include <yara/pe.h>
-#include <yara/modules.h>
-#include <yara/mem.h>
-#include <yara/strutils.h>
-#include <yara/utils.h>
+#include <yara_endian.h>
+#include <yara_pe.h>
+#include <yara_modules.h>
+#include <yara_mem.h>
+#include <yara_strutils.h>
+#include <yara_utils.h>

+#include "md5.h"
+typedef MD5_CTX yr_md5_ctx;

-#include <yara/pe_utils.h>
+#define yr_md5_init(ctx) \
+ MD5Init(ctx)
+#define yr_md5_update(ctx,data,len) \
+ MD5Update(ctx,data,len)
+#define yr_md5_final(digest,ctx) \
+ MD5Final(digest,ctx)
+
+#include <yara_pe_utils.h>

 #define MODULE_NAME pe

@@ -1824,10 +1833,6 @@ define_function(exports_ordinal)
   return_integer(0);
 }

-#if defined(HAVE_LIBCRYPTO) || \
-    defined(HAVE_WINCRYPT_H) || \
-    defined(HAVE_COMMONCRYPTO_COMMONCRYPTO_H)
-
 //
 // Generate an import hash:
 // https://www.mandiant.com/blog/tracking-malware-import-hashing/
@@ -1955,9 +1960,6 @@ define_function(imphash)
   return_string(digest_ascii);
 }

-#endif  // defined(HAVE_LIBCRYPTO) || defined(HAVE_WINCRYPT_H)
-
-
 define_function(imports)
 {
   char* dll_name = string_argument(1);
@@ -2555,12 +2557,7 @@ begin_declarations;
     declare_function("toolid", "ii", "i", rich_toolid_version);
   end_struct("rich_signature");

-  #if defined(HAVE_LIBCRYPTO) || \
-      defined(HAVE_WINCRYPT_H) || \
-      defined(HAVE_COMMONCRYPTO_COMMONCRYPTO_H)
   declare_function("imphash", "", "s", imphash);
-  #endif
-
   declare_function("section_index", "s", "i", section_index_name);
   declare_function("section_index", "i", "i", section_index_addr);
   declare_function("exports", "s", "i", exports);
diff --git a/libyara/proc/linux.c b/libyara/proc/linux.c
index 5f6a6f2b..9b95f72a 100644
--- a/libyara/proc/linux.c
+++ b/libyara/proc/linux.c
@@ -27,7 +27,6 @@ ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

-#if defined(USE_LINUX_PROC)

 #include <fcntl.h>
 #include <inttypes.h>
@@ -173,5 +172,3 @@ YR_API YR_MEMORY_BLOCK* yr_process_get_first_memory_block(

   return yr_process_get_next_memory_block(iterator);
 }
-
-#endif
diff --git a/libyara/proc/mach.c b/libyara/proc/mach.c
index 8ab6c527..be86abde 100644
--- a/libyara/proc/mach.c
+++ b/libyara/proc/mach.c
@@ -27,7 +27,6 @@ ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

-#if defined(USE_MACH_PROC)

 #include <mach/mach.h>
 #include <mach/mach_vm.h>
@@ -168,5 +167,3 @@ YR_API YR_MEMORY_BLOCK* yr_process_get_first_memory_block(

   return yr_process_get_next_memory_block(iterator);
 }
-
-#endif
diff --git a/libyara/proc/windows.c b/libyara/proc/windows.c
index c39521da..ceabf0ee 100644
--- a/libyara/proc/windows.c
+++ b/libyara/proc/windows.c
@@ -27,7 +27,6 @@ ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

-#if defined(USE_WINDOWS_PROC)

 #include <windows.h>

@@ -187,5 +186,3 @@ YR_API YR_MEMORY_BLOCK* yr_process_get_first_memory_block(

   return yr_process_get_next_memory_block(iterator);
 }
-
-#endif
